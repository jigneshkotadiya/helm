# Generated by Django 3.0.1 on 2020-01-05 06:43

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EngineeringBook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('book_slug', models.SlugField(max_length=150, unique=True)),
                ('primary_author_first_name', models.CharField(blank=True, max_length=100, verbose_name='Author First')),
                ('primary_author_last_name', models.CharField(blank=True, max_length=100, verbose_name='Author Last')),
                ('pub_date', models.DateField(blank=True, null=True, verbose_name='Book Pub Date')),
            ],
        ),
        migrations.CreateModel(
            name='EngineeringExam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('exam_slug', models.SlugField(max_length=150, unique=True)),
                ('code', models.CharField(max_length=50)),
                ('exam_start_date', models.DateField()),
                ('exam_end_date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='EngineeringSemester',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester', models.IntegerField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='EngineeringStream',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('stream_slug', models.SlugField(max_length=150, unique=True)),
                ('short_form', models.CharField(blank=True, max_length=5, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EngineeringSubject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('subject_slug', models.SlugField(max_length=150, unique=True)),
                ('code', models.CharField(max_length=250)),
                ('book', models.ManyToManyField(blank=True, to='engineering.EngineeringBook')),
            ],
        ),
        migrations.CreateModel(
            name='EngineeringSubjectClassification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='engineering.EngineeringSemester')),
                ('stream', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='engineering.EngineeringStream')),
                ('subject', models.ManyToManyField(blank=True, to='engineering.EngineeringSubject')),
            ],
        ),
        migrations.CreateModel(
            name='EngineeringOutcome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('internal_assessment', models.IntegerField(blank=True, help_text='Marks obtained out of 20', null=True, validators=[django.core.validators.MaxValueValidator(20), django.core.validators.MinValueValidator(0)])),
                ('internal_assessment_grade', models.CharField(blank=True, choices=[('O', 'O'), ('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E'), ('P', 'P'), ('F', 'F')], max_length=1, null=True)),
                ('term_work', models.IntegerField(blank=True, help_text='Marks obtained out of 25', null=True, validators=[django.core.validators.MaxValueValidator(25), django.core.validators.MinValueValidator(0)])),
                ('term_work_grade', models.CharField(blank=True, choices=[('O', 'O'), ('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E'), ('P', 'P'), ('F', 'F')], max_length=1, null=True)),
                ('oral', models.IntegerField(blank=True, help_text='Marks obtained out of 25', null=True, validators=[django.core.validators.MaxValueValidator(25), django.core.validators.MinValueValidator(0)])),
                ('oral_grade', models.CharField(blank=True, choices=[('O', 'O'), ('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E'), ('P', 'P'), ('F', 'F')], max_length=1, null=True)),
                ('oral_and_practical', models.IntegerField(blank=True, help_text='Marks obtained out of 25', null=True, validators=[django.core.validators.MaxValueValidator(25), django.core.validators.MinValueValidator(0)])),
                ('oral_and_practical_grade', models.CharField(blank=True, choices=[('O', 'O'), ('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E'), ('P', 'P'), ('F', 'F')], max_length=1, null=True)),
                ('end_sem_exam', models.IntegerField(blank=True, help_text='Marks obtained out of 80', null=True, validators=[django.core.validators.MaxValueValidator(80), django.core.validators.MinValueValidator(0)])),
                ('end_sem_exam_grade', models.CharField(blank=True, choices=[('O', 'O'), ('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E'), ('P', 'P'), ('F', 'F')], help_text="('O', 'M>=80'),('A', '75>=M<80'),('B', '70>=M<75'),\n                    ('C', '60>=M<70'),('D', '50>=M<60'),('E', '45>=M<50'),\n                    ('P', '40>=M<45'),('F', 'M<40')", max_length=1, null=True)),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='engineering.EngineeringExam')),
                ('stream_sem', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='engineering.EngineeringSubjectClassification')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='engineering.EngineeringSubject')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Engineering Student Result',
            },
        ),
    ]
